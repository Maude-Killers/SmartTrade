// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Backend.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ListProduct", b =>
                {
                    b.Property<int>("Product_code")
                        .HasColumnType("integer");

                    b.Property<int>("List_code")
                        .HasColumnType("integer");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.HasKey("Product_code", "List_code");

                    b.HasIndex("List_code");

                    b.ToTable("ListProducts");

                    b.HasData(
                        new
                        {
                            Product_code = 11,
                            List_code = 1,
                            Quantity = 1
                        },
                        new
                        {
                            Product_code = 12,
                            List_code = 2,
                            Quantity = 1
                        },
                        new
                        {
                            Product_code = 13,
                            List_code = 3,
                            Quantity = 1
                        },
                        new
                        {
                            Product_code = 14,
                            List_code = 4,
                            Quantity = 1
                        },
                        new
                        {
                            Product_code = 15,
                            List_code = 5,
                            Quantity = 1
                        },
                        new
                        {
                            Product_code = 6,
                            List_code = 6,
                            Quantity = 1
                        },
                        new
                        {
                            Product_code = 7,
                            List_code = 7,
                            Quantity = 1
                        },
                        new
                        {
                            Product_code = 8,
                            List_code = 8,
                            Quantity = 1
                        },
                        new
                        {
                            Product_code = 9,
                            List_code = 9,
                            Quantity = 1
                        },
                        new
                        {
                            Product_code = 10,
                            List_code = 10,
                            Quantity = 1
                        });
                });

            modelBuilder.Entity("SmartTrade.Models.Gallery", b =>
                {
                    b.Property<string>("Image")
                        .HasColumnType("text");

                    b.Property<int?>("Category")
                        .HasColumnType("integer");

                    b.Property<int?>("Product_code")
                        .HasColumnType("integer");

                    b.HasKey("Image");

                    b.HasIndex("Product_code");

                    b.ToTable("Gallery");

                    b.HasData(
                        new
                        {
                            Image = "https://i.imgur.com/WtfQOF3.png",
                            Product_code = 1
                        },
                        new
                        {
                            Image = "https://i.imgur.com/bRFgYfL.png",
                            Product_code = 2
                        },
                        new
                        {
                            Image = "https://i.imgur.com/0kTxfNT.png",
                            Product_code = 3
                        },
                        new
                        {
                            Image = "https://i.imgur.com/tewVKu5.png",
                            Product_code = 4
                        },
                        new
                        {
                            Image = "https://i.imgur.com/VcVlhzr.png",
                            Product_code = 5
                        },
                        new
                        {
                            Image = "https://i.imgur.com/9ZpZZfe.png",
                            Product_code = 6
                        },
                        new
                        {
                            Image = "https://i.imgur.com/YgKapTz.png",
                            Product_code = 7
                        },
                        new
                        {
                            Image = "https://i.imgur.com/kgj7C77.png",
                            Product_code = 8
                        },
                        new
                        {
                            Image = "https://i.imgur.com/ATQsdPb.png",
                            Product_code = 9
                        },
                        new
                        {
                            Image = "https://i.imgur.com/ADMjfOX.png",
                            Product_code = 10
                        },
                        new
                        {
                            Image = "https://i.imgur.com/IMMlRaG.png",
                            Product_code = 11
                        },
                        new
                        {
                            Image = "https://i.imgur.com/qNLCqrT.png",
                            Product_code = 12
                        },
                        new
                        {
                            Image = "https://i.imgur.com/qImnFwc.png",
                            Product_code = 13
                        },
                        new
                        {
                            Image = "https://i.imgur.com/icpDfTu.png",
                            Product_code = 14
                        },
                        new
                        {
                            Image = "https://i.imgur.com/B9UeUnE.png",
                            Product_code = 15
                        },
                        new
                        {
                            Image = "https://www.timeshighereducation.com/student/sites/default/files/styles/default/public/different_sports.jpg",
                            Category = 2
                        },
                        new
                        {
                            Image = "https://hips.hearstapps.com/hmg-prod/images/online-buying-and-delivery-concept-royalty-free-image-1675370119.jpg",
                            Category = 1
                        },
                        new
                        {
                            Image = "https://miro.medium.com/v2/resize:fit:720/format:webp/1*f9N5gbBNXLGqD7NgjzVg5g.jpeg",
                            Category = 0
                        });
                });

            modelBuilder.Entity("SmartTrade.Models.List", b =>
                {
                    b.Property<int>("List_code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("List_code"));

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("List_code");

                    b.ToTable("List");

                    b.HasDiscriminator<string>("Discriminator").HasValue("List");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("SmartTrade.Models.Person", b =>
                {
                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PhoneNumber")
                        .HasColumnType("integer");

                    b.HasKey("Email");

                    b.ToTable("Person");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Person");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("SmartTrade.Models.Product", b =>
                {
                    b.Property<int>("Product_code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Product_code"));

                    b.Property<int>("Category")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Features")
                        .HasColumnType("text");

                    b.Property<int>("Huella")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.HasKey("Product_code");

                    b.ToTable("Products");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Product");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("SmartTrade.Models.GiftList", b =>
                {
                    b.HasBaseType("SmartTrade.Models.List");

                    b.Property<string>("ClientEmail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasIndex("ClientEmail")
                        .IsUnique();

                    b.ToTable("List", t =>
                        {
                            t.Property("ClientEmail")
                                .HasColumnName("GiftList_ClientEmail");
                        });

                    b.HasDiscriminator().HasValue("GiftList");

                    b.HasData(
                        new
                        {
                            List_code = 6,
                            Name = "GiftList",
                            ClientEmail = "prueba1@prueba.com"
                        },
                        new
                        {
                            List_code = 7,
                            Name = "GiftList",
                            ClientEmail = "prueba2@prueba.com"
                        },
                        new
                        {
                            List_code = 8,
                            Name = "GiftList",
                            ClientEmail = "prueba3@prueba.com"
                        },
                        new
                        {
                            List_code = 9,
                            Name = "GiftList",
                            ClientEmail = "prueba4@prueba.com"
                        },
                        new
                        {
                            List_code = 10,
                            Name = "GiftList",
                            ClientEmail = "prueba5@prueba.com"
                        });
                });

            modelBuilder.Entity("SmartTrade.Models.LaterList", b =>
                {
                    b.HasBaseType("SmartTrade.Models.List");

                    b.Property<string>("ClientEmail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasIndex("ClientEmail")
                        .IsUnique();

                    b.HasDiscriminator().HasValue("LaterList");

                    b.HasData(
                        new
                        {
                            List_code = 16,
                            Name = "LaterList",
                            ClientEmail = "prueba1@prueba.com"
                        },
                        new
                        {
                            List_code = 17,
                            Name = "LaterList",
                            ClientEmail = "prueba2@prueba.com"
                        },
                        new
                        {
                            List_code = 18,
                            Name = "LaterList",
                            ClientEmail = "prueba3@prueba.com"
                        },
                        new
                        {
                            List_code = 19,
                            Name = "LaterList",
                            ClientEmail = "prueba4@prueba.com"
                        },
                        new
                        {
                            List_code = 20,
                            Name = "LaterList",
                            ClientEmail = "prueba5@prueba.com"
                        });
                });

            modelBuilder.Entity("SmartTrade.Models.ShoppingCart", b =>
                {
                    b.HasBaseType("SmartTrade.Models.List");

                    b.Property<string>("ClientEmail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasIndex("ClientEmail")
                        .IsUnique();

                    b.ToTable("List", t =>
                        {
                            t.Property("ClientEmail")
                                .HasColumnName("ShoppingCart_ClientEmail");
                        });

                    b.HasDiscriminator().HasValue("ShoppingCart");

                    b.HasData(
                        new
                        {
                            List_code = 11,
                            Name = "ShoppingCart",
                            ClientEmail = "prueba1@prueba.com"
                        },
                        new
                        {
                            List_code = 12,
                            Name = "ShoppingCart",
                            ClientEmail = "prueba2@prueba.com"
                        },
                        new
                        {
                            List_code = 13,
                            Name = "ShoppingCart",
                            ClientEmail = "prueba3@prueba.com"
                        },
                        new
                        {
                            List_code = 14,
                            Name = "ShoppingCart",
                            ClientEmail = "prueba4@prueba.com"
                        },
                        new
                        {
                            List_code = 15,
                            Name = "ShoppingCart",
                            ClientEmail = "prueba5@prueba.com"
                        });
                });

            modelBuilder.Entity("SmartTrade.Models.WishList", b =>
                {
                    b.HasBaseType("SmartTrade.Models.List");

                    b.Property<string>("ClientEmail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasIndex("ClientEmail")
                        .IsUnique();

                    b.ToTable("List", t =>
                        {
                            t.Property("ClientEmail")
                                .HasColumnName("WishList_ClientEmail");
                        });

                    b.HasDiscriminator().HasValue("WishList");

                    b.HasData(
                        new
                        {
                            List_code = 1,
                            Name = "WishList",
                            ClientEmail = "prueba1@prueba.com"
                        },
                        new
                        {
                            List_code = 2,
                            Name = "WishList",
                            ClientEmail = "prueba2@prueba.com"
                        },
                        new
                        {
                            List_code = 3,
                            Name = "WishList",
                            ClientEmail = "prueba3@prueba.com"
                        },
                        new
                        {
                            List_code = 4,
                            Name = "WishList",
                            ClientEmail = "prueba4@prueba.com"
                        },
                        new
                        {
                            List_code = 5,
                            Name = "WishList",
                            ClientEmail = "prueba5@prueba.com"
                        });
                });

            modelBuilder.Entity("SmartTrade.Models.Client", b =>
                {
                    b.HasBaseType("SmartTrade.Models.Person");

                    b.HasDiscriminator().HasValue("Client");

                    b.HasData(
                        new
                        {
                            Email = "prueba1@prueba.com",
                            FullName = "Cliente 1",
                            Password = "cliente1",
                            PhoneNumber = 654654655
                        },
                        new
                        {
                            Email = "prueba2@prueba.com",
                            FullName = "Cliente 2",
                            Password = "cliente2",
                            PhoneNumber = 654654656
                        },
                        new
                        {
                            Email = "prueba3@prueba.com",
                            FullName = "Cliente 3",
                            Password = "cliente3",
                            PhoneNumber = 654654657
                        },
                        new
                        {
                            Email = "prueba4@prueba.com",
                            FullName = "Cliente 4",
                            Password = "cliente4",
                            PhoneNumber = 654654658
                        },
                        new
                        {
                            Email = "prueba5@prueba.com",
                            FullName = "Cliente 5",
                            Password = "cliente5",
                            PhoneNumber = 654654659
                        });
                });

            modelBuilder.Entity("SmartTrade.Models.SalesPerson", b =>
                {
                    b.HasBaseType("SmartTrade.Models.Person");

                    b.Property<string>("Company")
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue("SalesPerson");
                });

            modelBuilder.Entity("SmartTrade.Models.GroceryProduct", b =>
                {
                    b.HasBaseType("SmartTrade.Models.Product");

                    b.HasDiscriminator().HasValue("GroceryProduct");

                    b.HasData(
                        new
                        {
                            Product_code = 6,
                            Category = 1,
                            Description = "descripcion6",
                            Features = "caracteristicas6",
                            Huella = -3,
                            Name = "product6",
                            Price = 16m
                        },
                        new
                        {
                            Product_code = 7,
                            Category = 1,
                            Description = "descripcion7",
                            Features = "caracteristicas7",
                            Huella = -6,
                            Name = "product7",
                            Price = 17m
                        },
                        new
                        {
                            Product_code = 8,
                            Category = 1,
                            Description = "descripcion8",
                            Features = "caracteristicas8",
                            Huella = 37,
                            Name = "product8",
                            Price = 18m
                        },
                        new
                        {
                            Product_code = 9,
                            Category = 1,
                            Description = "descripcion9",
                            Features = "caracteristicas9",
                            Huella = 15,
                            Name = "product9",
                            Price = 19m
                        },
                        new
                        {
                            Product_code = 10,
                            Category = 1,
                            Description = "descripcion10",
                            Features = "caracteristicas10",
                            Huella = 53,
                            Name = "product10",
                            Price = 20m
                        });
                });

            modelBuilder.Entity("SmartTrade.Models.SportProduct", b =>
                {
                    b.HasBaseType("SmartTrade.Models.Product");

                    b.HasDiscriminator().HasValue("SportProduct");

                    b.HasData(
                        new
                        {
                            Product_code = 1,
                            Category = 2,
                            Description = "descripcion1",
                            Features = "caracteristicas1",
                            Huella = 4,
                            Name = "product1",
                            Price = 11m
                        },
                        new
                        {
                            Product_code = 2,
                            Category = 2,
                            Description = "descripcion2",
                            Features = "caracteristicas2",
                            Huella = 35,
                            Name = "product2",
                            Price = 12m
                        },
                        new
                        {
                            Product_code = 3,
                            Category = 2,
                            Description = "descripcion3",
                            Features = "caracteristicas3",
                            Huella = 42,
                            Name = "product3",
                            Price = 13m
                        },
                        new
                        {
                            Product_code = 4,
                            Category = 2,
                            Description = "descripcion4",
                            Features = "caracteristicas4",
                            Huella = -13,
                            Name = "product4",
                            Price = 14m
                        },
                        new
                        {
                            Product_code = 5,
                            Category = 2,
                            Description = "descripcion5",
                            Features = "caracteristicas5",
                            Huella = -14,
                            Name = "product5",
                            Price = 15m
                        });
                });

            modelBuilder.Entity("SmartTrade.Models.TechnoProduct", b =>
                {
                    b.HasBaseType("SmartTrade.Models.Product");

                    b.HasDiscriminator().HasValue("TechnoProduct");

                    b.HasData(
                        new
                        {
                            Product_code = 11,
                            Category = 0,
                            Description = "descripcion11",
                            Features = "caracteristicas11",
                            Huella = 42,
                            Name = "product11",
                            Price = 21m
                        },
                        new
                        {
                            Product_code = 12,
                            Category = 0,
                            Description = "descripcion12",
                            Features = "caracteristicas12",
                            Huella = 20,
                            Name = "product12",
                            Price = 22m
                        },
                        new
                        {
                            Product_code = 13,
                            Category = 0,
                            Description = "descripcion13",
                            Features = "caracteristicas13",
                            Huella = 11,
                            Name = "product13",
                            Price = 23m
                        },
                        new
                        {
                            Product_code = 14,
                            Category = 0,
                            Description = "descripcion14",
                            Features = "caracteristicas14",
                            Huella = 24,
                            Name = "product14",
                            Price = 24m
                        },
                        new
                        {
                            Product_code = 15,
                            Category = 0,
                            Description = "descripcion15",
                            Features = "caracteristicas15",
                            Huella = 5,
                            Name = "product15",
                            Price = 25m
                        });
                });

            modelBuilder.Entity("ListProduct", b =>
                {
                    b.HasOne("SmartTrade.Models.List", "List")
                        .WithMany("listProducts")
                        .HasForeignKey("List_code")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartTrade.Models.Product", "Product")
                        .WithMany("ListProducts")
                        .HasForeignKey("Product_code")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("List");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("SmartTrade.Models.Gallery", b =>
                {
                    b.HasOne("SmartTrade.Models.Product", "Product")
                        .WithMany("Images")
                        .HasForeignKey("Product_code");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("SmartTrade.Models.GiftList", b =>
                {
                    b.HasOne("SmartTrade.Models.Client", "Client")
                        .WithOne("GiftList")
                        .HasForeignKey("SmartTrade.Models.GiftList", "ClientEmail")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("SmartTrade.Models.LaterList", b =>
                {
                    b.HasOne("SmartTrade.Models.Client", "Client")
                        .WithOne("LaterList")
                        .HasForeignKey("SmartTrade.Models.LaterList", "ClientEmail")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("SmartTrade.Models.ShoppingCart", b =>
                {
                    b.HasOne("SmartTrade.Models.Client", "Client")
                        .WithOne("ShoppingCart")
                        .HasForeignKey("SmartTrade.Models.ShoppingCart", "ClientEmail")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("SmartTrade.Models.WishList", b =>
                {
                    b.HasOne("SmartTrade.Models.Client", "Client")
                        .WithOne("WishList")
                        .HasForeignKey("SmartTrade.Models.WishList", "ClientEmail")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("SmartTrade.Models.List", b =>
                {
                    b.Navigation("listProducts");
                });

            modelBuilder.Entity("SmartTrade.Models.Product", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("ListProducts");
                });

            modelBuilder.Entity("SmartTrade.Models.Client", b =>
                {
                    b.Navigation("GiftList")
                        .IsRequired();

                    b.Navigation("LaterList")
                        .IsRequired();

                    b.Navigation("ShoppingCart")
                        .IsRequired();

                    b.Navigation("WishList")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
