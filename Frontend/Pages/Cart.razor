@inject IJSRuntime Js
@inject HttpClient httpClient
@page "/cart"

<div class="relative overflow-x-auto shadow-md sm:rounded-lg">
    <div class="mt-4 text-lg font-semibold text-gray-900 dark:text-white">
        Total Price: @TotalPrice€
    </div>
    <table class="w-full text-sm text-left rtl:text-right text-gray-500 dark:text-gray-400">
        <thead class="text-xs text-gray-700 uppercase bg-gray-50 dark:bg-gray-700 dark:text-gray-400">
            <tr>
                <th scope="col" class="px-16 py-3">
                    <span class="sr-only">Image</span>
                </th>
                <th scope="col" class="px-6 py-3">
                    Product
                </th>
                <th scope="col" class="px-6 py-3">
                    Quantity
                </th>
                <th scope="col" class="px-6 py-3">
                    Price
                </th>
                <th scope="col" class="px-6 py-3">
                </th>
                <th scope="col" class="px-6 py-3">
                    Action
                </th>
            </tr>
        </thead>
        <tbody>
            @foreach (var product in productDictionary)
            {
                <CartTableItem product="product.Key" quantity="product.Value"/>
            }
        </tbody>
    </table>
</div>


<div class="inline-flex items-center justify-center w-full">
    <hr class="w-96 h-1 mx-auto my-4 bg-gray-100 border-0 rounded md:my-10 dark:bg-gray-700">
    <span
        class="absolute px-3 font-medium text-gray-900 -translate-x-1/2 bg-white left-1/2 dark:text-white dark:bg-gray-900">Lista
        para más tarde</span>
</div>


<LaterList />


@code {
    private List<Product> products { get; set; } = new List<Product>();
    private Dictionary<Product, int> productDictionary { get; set; } = new Dictionary<Product, int>();
    private decimal TotalPrice { get; set; }

    protected override async Task OnAfterRenderAsync(bool isFirstRender)
    {
        if (isFirstRender)
        {
            await Js.InvokeVoidAsync("window.initializeFlowbite");
            var request = new HttpRequestMessage(HttpMethod.Get, "/cart");
            request.SetBrowserRequestCredentials(BrowserRequestCredentials.Include);
            var result = await httpClient.SendAsync(request);
            products = await result.Content.ReadFromJsonAsync<List<Product>>() ?? new List<Product>();

            foreach (var product in products)
            {
                if (productDictionary.ContainsKey(product))
                {
                    productDictionary[product]++;
                }
                else
                {
                    productDictionary.Add(product, 1);
                }
            }
            TotalPrice = CalculateTotalPrice();
            StateHasChanged();
        }
    }

    private decimal CalculateTotalPrice()
    {
        decimal totalPrice = 0;
        foreach (var entry in productDictionary)
        {
            var product = entry.Key;
            var quantity = entry.Value;
            totalPrice += product.Price * quantity;
        }

        return totalPrice;
    }
    //private async Task HandleQuantityChanged()
    //{
    //    TotalPrice = CalculateTotalPrice();
    //    StateHasChanged();
    //}
}