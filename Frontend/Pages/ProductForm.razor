@inject ProductService service
@inject HttpClient Http
@inject NavigationManager nav
@page "/product/{product_code}"

<PageTitle>Products</PageTitle>

<div class="flex justify-center items-center h-screen">
    <div class="flex flex-col bg-white border border-gray-200 rounded-lg shadow md:flex-row md:max-w-4xl md:mx-4xl hover:bg-gray-100 dark:border-gray-700 dark:bg-gray-800 dark:hover:bg-gray-700">
        <img class="object-cover w-full rounded-t-lg md:h-auto md:w-48 md:rounded-none md:rounded-l-lg" src="https://flowbite.com/docs/images/blog/image-4.jpg" alt="">
        <div class="flex flex-col justify-between p-4 leading-normal">
            <h5 class="mb-2 text-2xl font-bold tracking-tight text-gray-900 dark:text-white">@product.Name</h5>
            <p class="mb-3 font-normal text-gray-700 dark:text-gray-400">@product.Price</p>
            <p class="mb-3 font-normal text-gray-700 dark:text-gray-400">@product.Description</p>
            <div class="flex justify-start">
                <button class="bg-blue-500 text-white px-4 py-2 rounded-md mr-4 hover:bg-blue-600">Agregar a la lista de deseos</button>
                <button class="bg-green-500 text-white px-4 py-2 rounded-md hover:bg-green-600">Agregar al carrito</button>
            </div>
        </div>
    </div>
</div>




@*
<section class="bg-white dark:bg-gray-900">
    <div class="max-w-2xl px-4 py-8 mx-auto lg:py-16">
        <h2 class="mb-4 text-xl font-bold text-gray-900 dark:text-white">Update product</h2>
        <form @onsubmit="HandleValidSubmit">
            <div class="relative max-w-sm mb-4">
                <label for="name" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Name</label>
                <input type="name" name="name" @bind-value="product.Name"
                       class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
                       placeholder="Select date">
            </div>
            <div class="grid gap-4 mb-4 sm:grid-cols-2 sm:gap-6 sm:mb-5">
                <div class="sm:col-span-2">
                    <label for="name" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">
                        Price
                    </label>
                    <input type="text" name="tempC" id="name"
                           class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-primary-600 focus:border-primary-600 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500"
                    @bind-value="product.Price" placeholder="Type product name" required="">
                </div>
            </div>
            <div class="grid gap-4 mb-4 sm:grid-cols-2 sm:gap-6 sm:mb-5">
                <div class="sm:col-span-2">
                    <label for="name" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">
                        Temp.
                        (F)
                    </label>
                    <input type="text" name="tempF" id="name"
                           class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-primary-600 focus:border-primary-600 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500"
                           value="@product.Price" placeholder="Type product name" required="">
                </div>
            </div>
            <div class="grid gap-4 mb-4 sm:grid-cols-2 sm:gap-6 sm:mb-5">
                <div class="sm:col-span-2">
                    <label for="name"
                           class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Summary</label>
                    <input type="text" name="summary" id="name"
                           class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-primary-600 focus:border-primary-600 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500"
                    @bind-value="product.Description" placeholder="Type product name" required="">
                </div>
            </div>
            <div class="flex items-center space-x-4">
                <button type="submit"
                        class="text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 me-2 mb-2 dark:bg-blue-600 dark:hover:bg-blue-700 focus:outline-none dark:focus:ring-blue-800">
                    Update product
                </button>
                <button type="button" @onclick="HandleDelete"
                        class="text-red-600 inline-flex items-center hover:text-white border border-red-600 hover:bg-red-600 focus:ring-4 focus:outline-none focus:ring-red-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center dark:border-red-500 dark:text-red-500 dark:hover:text-white dark:hover:bg-red-600 dark:focus:ring-red-900">
                    <svg class="w-5 h-5 mr-1 -ml-1" fill="currentColor" viewBox="0 0 20 20"
                         xmlns="http://www.w3.org/2000/svg">
                        <path fill-rule="evenodd"
                              d="M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z"
                              clip-rule="evenodd"></path>
                    </svg>
                    Delete
                </button>
            </div>
        </form>
    </div>
</section>
*@

@code {
    [Parameter]
    public string? product_code { get; set; }
    private Product product = new Product();
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            product = await Http.GetFromJsonAsync<Product>($"/products/{product_code}") ?? new Product();
            if (product == null) return;
            StateHasChanged();
        }
    }

    private async Task HandleValidSubmit()
    {
        await service.SaveProductAsync(product);
        nav.NavigateTo("/wishlist");
    }

    private async Task HandleDelete()
    {
        await service.DeleteProductAsync(int.Parse(product_code));
        nav.NavigateTo("/wishlist");
    }
}
