@inject ProductService service
@page "/results/{searchTerm}"


<span class="text-2xl text-left rtl:text-right text-gray-500 dark:text-gray-400">Mostrando @resultCount resultados para
    "@searchTerm":</span>
<main class="grid grid-cols-5">
    <aside class="col-span-1 m-4">
        <div class="relative mb-10">
            <label for="minmax-range"
                class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Precio:</label>
            <input id="minmax-range" type="range" min="@minPrice" max="@maxPrice" value="@currentPrice"
                @oninput="HandlePriceInput"
                class="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer dark:bg-gray-700">
            <span class="text-sm text-gray-500 dark:text-gray-400 absolute start-0 -bottom-6">Min (@minPrice€)</span>
            <span class="text-sm text-gray-500 dark:text-gray-400 absolute end-0 -bottom-6">Max (@maxPrice€)</span>
        </div>
        <h3 class="my-4 font-semibold text-gray-900 dark:text-white">Category</h3>
        <ul
            class="mb-8 w-sm text-sm font-medium text-gray-900 bg-white border border-gray-200 rounded-lg dark:bg-gray-700 dark:border-gray-600 dark:text-white">
            <li class="w-full border-b border-gray-200 rounded-t-lg dark:border-gray-600">
                <div class="flex items-center ps-3">
                    <input id="sport-checkbox" type="checkbox" @bind-value="isSport" @bind-value:event="onchange"
                        class="w-4 h-4 text-blue-600 bg-gray-100 border-gray-300 rounded focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-700 dark:focus:ring-offset-gray-700 focus:ring-2 dark:bg-gray-600 dark:border-gray-500">
                    <label for="vue-checkbox"
                        class="w-full py-3 ms-2 text-sm font-medium text-gray-900 dark:text-gray-300">Sport</label>
                </div>
            </li>
            <li class="w-full border-b border-gray-200 rounded-t-lg dark:border-gray-600">
                <div class="flex items-center ps-3">
                    <input id="tech-checkbox" type="checkbox" @bind-value="isTech" @bind-value:event="onchange"
                        class="w-4 h-4 text-blue-600 bg-gray-100 border-gray-300 rounded focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-700 dark:focus:ring-offset-gray-700 focus:ring-2 dark:bg-gray-600 dark:border-gray-500">
                    <label for="react-checkbox"
                        class="w-full py-3 ms-2 text-sm font-medium text-gray-900 dark:text-gray-300">Techno</label>
                </div>
            </li>
            <li class="w-full border-b border-gray-200 rounded-t-lg dark:border-gray-600">
                <div class="flex items-center ps-3">
                    <input id="grocery-checkbox" type="checkbox" @bind-value="isGrocery" @bind-value:event="onchange"
                        class="w-4 h-4 text-blue-600 bg-gray-100 border-gray-300 rounded focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-700 dark:focus:ring-offset-gray-700 focus:ring-2 dark:bg-gray-600 dark:border-gray-500">
                    <label for="angular-checkbox"
                        class="w-full py-3 ms-2 text-sm font-medium text-gray-900 dark:text-gray-300">Grocery</label>
                </div>
            </li>
        </ul>
        <div class="relative mb-6">
            <label for="minmax-range" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Huella
                ecológica:</label>
            <input id="minmax-range" type="range" min="@minFingerPrint" max="@maxFingerPrint"
                value="@currentFingerPrint" @oninput="HandleFingerInput"
                class="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer dark:bg-gray-700">
            <span class="text-sm text-gray-500 dark:text-gray-400 absolute start-0 -bottom-6">Min
                (@minFingerPrint)</span>
            <span class="text-sm text-gray-500 dark:text-gray-400 absolute end-0 -bottom-6">Max (@maxFingerPrint)</span>
        </div>
    </aside>

    <div class="col-span-4 relative overflow-x-auto shadow-md sm:rounded-lg">
        <main class="flex flex-col justify-center">
            <article class="max-h-lg grid grid-cols-2 md:grid-cols-4 gap-4 items-center justify-items-center">
                @foreach (var product in products)
                {
                    <ProductCard product="@product" showPrice="false" />
                }
            </article>
        </main>
    </div>
    <button type="button" @onclick="HandleFilterBtnClick"
        class="text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 me-2 mb-2 dark:bg-blue-600 dark:hover:bg-blue-700 focus:outline-none dark:focus:ring-blue-800">Aplicar
        filtros</button>

</main>


@code {
    [Parameter]
    public string searchTerm { get; set; } = "";
    private ProductDTO[] originalProducts = Array.Empty<ProductDTO>();
    private ProductDTO[] products = Array.Empty<ProductDTO>();
    private int resultCount { get; set; } = 0;
    private decimal minPrice { get; set; } = 0;
    private decimal maxPrice { get; set; } = 0;
    private int currentPrice { get; set; } = 0;
    private int minFingerPrint { get; set; } = 0;
    private int maxFingerPrint { get; set; } = 0;
    private int currentFingerPrint { get; set; } = 0;
    private bool isSport { get; set; } = false;
    private bool isTech { get; set; } = false;
    private bool isGrocery { get; set; } = false;
    private string[] images = Array.Empty<string>();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            originalProducts = await service.SearchProduct(searchTerm);
            products = originalProducts;

            resultCount = products.Count();

            var minPriceProduct = products.MinBy(product => product.Price);
            minPrice = minPriceProduct?.Price ?? default;

            var maxPriceProduct = products.MaxBy(product => product.Price);
            maxPrice = maxPriceProduct?.Price ?? default;
            currentPrice = Convert.ToInt32((maxPrice + minPrice) / 2);

            var minFingerProduct = products.MinBy(product => product.Huella);
            minFingerPrint = minFingerProduct?.Huella ?? 0;

            var maxFingerProduct = products.MaxBy(product => product.Huella);
            maxFingerPrint = maxFingerProduct?.Huella ?? 0;
            currentFingerPrint = (maxFingerPrint + minFingerPrint) / 2;
            StateHasChanged();
        }
    }

    private void HandlePriceInput(ChangeEventArgs e)
    {
        currentPrice = Convert.ToInt32(e.Value);
    }

    private void HandleFingerInput(ChangeEventArgs e)
    {
        currentFingerPrint = Convert.ToInt32(e.Value);
    }
    
    private void SportFilter()
    {

        if (isSport)
            products = products.Where(product => product.Category == ProductDTO.Category).ToArray();
    }

    private void TechFilter()
    {
        if (isTech)
            products = products.Where(product => product.Category == ProductDTO.Category).ToArray();
    }

    private void GroceryFilter()
    {
        if (isGrocery)
            products = products.Where(product => product.Category == ProductDTO.Category).ToArray();
    }
    
    private void PriceFilter()
    {
        products = products.Where(product => product.Price < currentPrice).ToArray();
    }

    private void FingerPrintFilter()
    {
        products = products.Where(product => product.Huella < currentFingerPrint).ToArray();
    }

    private void HandleFilterBtnClick()
    {
        products = originalProducts;
        PriceFilter();
        SportFilter();
        TechFilter();
        GroceryFilter();
        FingerPrintFilter();
        StateHasChanged();
    }
}